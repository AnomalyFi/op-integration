version: '3.4'

# This Compose file is expected to be used with the devnet-up.sh script.
# The volumes below mount the configs generated by the script into each
# service.

networks:
  static:
    ipam:
      driver: default
      config:
        - subnet: $SUBNET.0.0/16
  standard:

volumes:
  l1_data:
  l2_data:
  op_log:
  op2_l2_data:
  op2_log:
  l2_builder_data:


services:
  op_stack_go_builder:  # Not an actual service, but builds the prerequisite go images
    build:
      context: ../
      dockerfile: ops/docker/op-stack-go/Dockerfile
      args:
        GIT_COMMIT: "dev"
        GIT_DATE: "0"
    image: op-stack-go
    entrypoint: ["echo", "build complete"]

  artifact-server:
    # depends_on:
    #   - l1
    image: nginx:1.25-alpine
    ports:
      - "8080:80"
    volumes:
      - "${DEVNET_DIR}/:/usr/share/nginx/html/:ro"
    security_opt:
      - "no-new-privileges:true"

  op1-l2:
    networks:
      static:
        ipv4_address: $SUBNET.0.6
      standard:
    image: op-geth
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "$OP1_L2_RPC_PORT:8545"
      - "$OP1_L2_DEBUG_PORT:6060"
      - "$OP1_L2_P2P_PORT:30303"
      - "$OP1_L2_P2P_PORT:30303/udp"
    volumes:
      - "l2_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "./entrypoint-l2.sh:/entrypoint.sh"
    entrypoint:  # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"
      - "--nat=extip:$SUBNET.0.6"
    environment:
      GETH_MINER_RECOMMIT: 100ms

  op1-node:
    networks:
      static:
        ipv4_address: $SUBNET.0.7
      standard:
    depends_on:
      - op_stack_go_builder
      # - l1
      - op1-l2
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
      args:
        OP_STACK_GO_BUILDER: op-stack-go
    # TODO: replace l1 address
    command: >
      op-node
      --log.level=debug
      --l1=${L1WS}
      --l2=http://op1-l2:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --nodekit=${SEQ_ADDR}
      --sequencer.enabled
      --sequencer.l1-confs=0
      --verifier.l1-confs=0
      --p2p.sequencer.key=8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8545
      --p2p.advertise.ip=$SUBNET.0.7
      --p2p.listen.ip=0.0.0.0
      --p2p.listen.tcp=9003
      --p2p.listen.udp=9003
      --p2p.scoring.peers=light
      --p2p.ban.peers=false
      --snapshotlog.file=/op_log/snapshot.log
      --p2p.priv.path=/config/p2p-node-key.txt
      --metrics.enabled
      --metrics.addr=0.0.0.0
      --metrics.port=7300
      --pprof.enabled
      --rpc.enable-admin
    ports:
      - "$OP1_NODE_RPC_PORT:8545"
      - "$OP1_NODE_P2P_PORT:9003"
      - "$OP1_NODE_METRICS_PORT:7300"
      - "$OP1_NODE_DEBUG_PORT:6060"
    volumes:
      - "${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt"
      - "${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${DEVNET_DIR}/rollup.json:/rollup.json"
      - op_log:/op_log
    environment:
    # for op-service/nodekit
      NODEKIT_SEQ_CHAIN_ID: $SEQ_CHAIN_ID
      NODEKIT_SEQ_ADDR: $SEQ_ADDR

  op1-proposer:
    networks:
      - standard
    depends_on:
      - op_stack_go_builder
      # - l1
      - op1-l2
      - op1-node
    build:
      context: ../
      dockerfile: ./op-proposer/Dockerfile
      args:
        OP_STACK_GO_BUILDER: op-stack-go
    image: op-proposer
    ports:
      - "$OP1_PROPOSER_DEBUG_PORT:6060"
      - "$OP1_PROPOSER_METRICS_PORT:7300"
      - "$OP1_PROPOSER_RPC_PORT:8545"
    environment:
    # TODO: replace l1 addr
      OP_PROPOSER_L1_ETH_RPC: ${L1RPC}
      OP_PROPOSER_ROLLUP_RPC: http://op1-node:8545
      OP_PROPOSER_POLL_INTERVAL: 1s
      OP_PROPOSER_NUM_CONFIRMATIONS: 1
      OP_PROPOSER_MNEMONIC: "$OP_PROPOSER_MNEMONIC"
      # OP_PROPOSER_MNEMONIC: test test test test test test test test test test test junk
      OP_PROPOSER_L2_OUTPUT_HD_PATH: "$OP_PROPOSER_L2_OUTPUT_HD_PATH"
      # OP_PROPOSER_L2_OUTPUT_HD_PATH: "m/44'/60'/0'/0/1"
      OP_PROPOSER_L2OO_ADDRESS: "${L2OO_ADDRESS}"
      OP_PROPOSER_PPROF_ENABLED: "true"
      OP_PROPOSER_METRICS_ENABLED: "true"
      OP_PROPOSER_ALLOW_NON_FINALIZED: "true"
      OP_PROPOSER_RPC_ENABLE_ADMIN: "true"

  op1-batcher:
    networks:
      - standard
    depends_on:
      - op_stack_go_builder
      # - l1
      - op1-l2
      - op1-node
    build:
      context: ../
      dockerfile: ./op-batcher/Dockerfile
      args:
        OP_STACK_GO_BUILDER: op-stack-go
    image: op-batcher
    ports:
      - "$OP1_BATCHER_DEBUG_PORT:6060"
      - "$OP1_BATCHER_METRICS_PORT:7300"
      - "$OP1_BATCHER_RPC_PORT:8545"
    # TODO: replace l1 addr
    command: >
      op-batcher
      --log.level=debug
    environment:
      OP_BATCHER_L1_ETH_RPC: ${L1RPC}
      OP_BATCHER_L2_ETH_RPC: http://op1-l2:8545
      OP_BATCHER_ROLLUP_RPC: http://op1-node:8545
      OP_BATCHER_MAX_CHANNEL_DURATION: 1
      OP_BATCHER_SUB_SAFETY_MARGIN: 4 # SWS is 15, ChannelTimeout is 40
      OP_BATCHER_POLL_INTERVAL: 1s
      OP_BATCHER_NUM_CONFIRMATIONS: 1
      OP_BATCHER_MNEMONIC: "$OP_BATCHER_MNEMONIC"
      # OP_BATCHER_MNEMONIC: test test test test test test test test test test test junk
      OP_BATCHER_SEQUENCER_HD_PATH: "$OP_BATCHER_SEQUENCER_HD_PATH"
      # OP_BATCHER_SEQUENCER_HD_PATH: "m/44'/60'/0'/0/2"
      OP_BATCHER_PPROF_ENABLED: "true"
      OP_BATCHER_METRICS_ENABLED: "true"
      OP_BATCHER_RPC_ENABLE_ADMIN: "true"
      OP_BATCHER_BATCH_TYPE: 0
    # The batcher does not respond to sigint
    stop_grace_period: 1s

  # TODO: fix javelin-builder and replace this
  # l2-builder:
  #   networks:
  #     static:
  #       ipv4_address: $SUBNET.0.8
  #     standard:
  #   image: op-geth
  #   build:
  #     context: ../../op-geth
  #   ports:
  #     - "$BUILDER_RPC_PORT:8545"
  #   volumes:
  #     - "l2_builder_data:/db"
  #     - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
  #     - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
  #   entrypoint:  # pass the L2 specific flags by overriding the entry-point and adding extra arguments
  #     - "/bin/sh"
  #     - "/entrypoint.sh"
  #     - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"
  #     - "--verbosity=4"
  #     - "--bootnodes=${ENODE}"
  #     - "--nat=extip:$SUBNET.0.8"
  #   environment:
  #     GETH_MINER_RECOMMIT: 100ms

  l2-builder:
    networks:
      static:
        ipv4_address: $SUBNET.0.8
      standard:
    build:
      context: ../../javelin-op-stack
    ports:
      - "$BUILDER_RPC_PORT:8545"
      # - "9501:8551"
      # - "18061:6060"
    volumes:
      - "l2_builder_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
    entrypoint:  # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--verbosity=5"
      - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"
      - "--nat=extip:$SUBNET.0.8"
      - "--builder"
      - "--builder.dry-run"
      - "--builder.local_relay"
      - "--builder.seconds_in_slot=2"
      - "--builder.submission_offset=1s"
      # - "--builder.beacon_endpoints=http://op-node-builder:8501"
      # - "--miner.extradata=''"
      # - "--miner.algotype=greedy"
      - "--bootnodes=${ENODE}"

  # TODO: do we need this?
  op-node-builder:
    restart: on-failure:5
    networks:
      static:
        ipv4_address: $SUBNET.0.9
      standard:
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
      args:
        OP_STACK_GO_BUILDER: op-stack-go
    command: >
      op-node
      --log.level=debug
      --l1=${L1WS}
      --l2=http://l2-builder:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8500
      --rpc.enable-admin
      --p2p.advertise.ip=$SUBNET.0.9
      --p2p.bootnodes=${ENR}
      --p2p.sync.req-resp
      --syncmode=consensus-layer
    ports:
      - "$OPNODE_BUILDER_RPC:8500"
      # - "7501:8501"
    volumes:
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${PWD}/../.devnet/rollup.json:/rollup.json"
      - op_log:/op_log
